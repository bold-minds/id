name: tests
on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        include:
          # Primary testing: Latest Go on all platforms (time/concurrency testing)
          - go-version: '1.24'
            os: ubuntu-latest
          - go-version: '1.24'
            os: windows-latest
          - go-version: '1.24'
            os: macos-latest
          # Compatibility testing: Min supported Go on Linux only
          - go-version: '1.22'
            os: ubuntu-latest
          # Intermediate compatibility: Go 1.23 on Linux only
          - go-version: '1.23'
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go mod download
      
      # Build validation (cross-platform)
      - name: Build validation
        run: |
          go build ./...
          go mod tidy
          git diff --exit-code go.mod go.sum
      
      # Unit tests with race detection
      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: go test -v -race -coverprofile=coverage.out ./...
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: go test -v -coverprofile="coverage.out" ./...
      - name: Run benchmarks
        run: go test -bench=. -benchmem ./...
      
      # Generate badge data from CI metrics (only from primary job)
      - name: Generate badge data
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        run: |
          mkdir -p .github/badges
          
          # Install golangci-lint for badge generation
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.1
          
          # Generate coverage badge from existing coverage.out
          if [[ -f "coverage.out" ]]; then
            COVERAGE=$(go test -coverprofile=temp_coverage.out ./. 2>/dev/null | grep "coverage:" | grep -oE '[0-9]+\.[0-9]+%' | sed 's/%//' | head -1)
            rm -f temp_coverage.out 2>/dev/null
            
            if [[ -z "$COVERAGE" ]]; then
              COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            fi
            
            if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              echo '{"schemaVersion":1,"label":"coverage","message":"'$COVERAGE'%","color":"brightgreen"}' > .github/badges/coverage.json
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              echo '{"schemaVersion":1,"label":"coverage","message":"'$COVERAGE'%","color":"yellow"}' > .github/badges/coverage.json
            else
              echo '{"schemaVersion":1,"label":"coverage","message":"'$COVERAGE'%","color":"red"}' > .github/badges/coverage.json
            fi
          fi
          
          # Generate Go version badge
          GO_VERSION=$(go version | grep -oE 'go[0-9]+\.[0-9]+(\.[0-9]+)?' | head -1)
          echo '{"schemaVersion":1,"label":"Go","message":"'$GO_VERSION'","color":"00ADD8"}' > .github/badges/go-version.json
          
          # Generate last updated badge (shows when CI last ran)
          LAST_UPDATED=$(date -u +"%Y-%m-%d")
          echo '{"schemaVersion":1,"label":"last updated","message":"'$LAST_UPDATED'","color":"blue"}' > .github/badges/last-updated.json
          
          # Generate golangci-lint badge (run separately to get JSON output)
          golangci-lint run --out-format json > .github/badges/lint-results.json || true
          ISSUES=$(jq '.Issues | length // 0' .github/badges/lint-results.json)
          
          if [ "$ISSUES" -eq 0 ]; then
            echo '{"schemaVersion":1,"label":"golangci-lint","message":"0 issues","color":"brightgreen"}' > .github/badges/golangci-lint.json
          else
            echo '{"schemaVersion":1,"label":"golangci-lint","message":"'$ISSUES' issues","color":"red"}' > .github/badges/golangci-lint.json
          fi
          
      - name: Deploy badges to GitHub Pages
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .github/badges
          destination_dir: badges
          keep_files: false
